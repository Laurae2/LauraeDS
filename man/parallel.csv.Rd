% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel.csv.R
\name{parallel.csv}
\alias{parallel.csv}
\title{Parallel CSV Converter}
\usage{
parallel.csv(file, compress = 35, max_threads = parallel::detectCores(),
  progress_bar = TRUE, clean_mem = FALSE, ...)
}
\arguments{
\item{file}{Type: vector of characters. Path to all files to read.}

\item{compress}{Type: numeric. Compression rate to use. Defaults to \code{35}.}

\item{max_threads}{Type: numeric. The maximum number of threads allowed to adapt \code{fst::threads_fst}. Defaults to \code{parallel::detectCores()}.}

\item{progress_bar}{Type: logical. Whether to print a progress bar. Defaults to \code{TRUE}.}

\item{clean_mem}{Type: logical. Whether the force garbage collection at the end of each file read in order to reclaim RAM. Defaults to \code{FALSE}.}

\item{...}{Other arguments to pass to \code{fst::write.fst}.}
}
\value{
The element or the list of \code{fst} file names.
}
\description{
Parallelizes the writing of separate CSV files (still sequential reading) in order to store them in \code{fst} format (also, overwrites \code{fst::threads_fst}. Requires \code{data.table} and \code{fst} packages.
}
\examples{
# Do it on your own files!
# library(fst) # devtools::install_github("fstPackage/fst@e060e62")
# library(data.table)
# library(parallel)
# 
# parallel.csv(c("file_1.csv", "file_2.csv"), max_threads = 1, progress_bar = TRUE)

}
